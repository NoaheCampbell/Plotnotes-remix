import { json, redirect } from "@remix-run/node";
import { Form, useActionData, useLoaderData, useNavigation, useSubmit } from "@remix-run/react";
import { useState, useEffect, useRef } from "react";
import { TermModel, Term } from "~/models/term.server";
import { getSession } from "~/services/session.server";
import Header from "~/components/header";
import type { ActionFunction, LoaderFunction } from "@remix-run/node";

export const loader: LoaderFunction = async ({ request }) => {
  const session = await getSession(request.headers.get("Cookie"));
  const user = session.get("user");
  if (!user) {
    return redirect("/auth/google");
  }

  const terms = await TermModel.findByUserId(user.id);
  return json({ user, terms });
};

export const action: ActionFunction = async ({ request }) => {
  const session = await getSession(request.headers.get("Cookie"));
  const user = session.get("user");
  if (!user) {
    return redirect("/auth/google");
  }

  const formData = await request.formData();
  const intent = formData.get("intent");

  if (intent === "create") {
    const term = formData.get("term") as string;
    const description = formData.get("description") as string;
    const category = formData.get("category") as string;

    if (!term || !description) {
      return json({ error: "Term and description are required" }, { status: 400 });
    }

    await TermModel.create({ userId: user.id, term, description, category });
    return json({ success: true });
  }

  if (intent === "delete") {
    const termId = parseInt(formData.get("termId") as string, 10);
    await TermModel.delete(termId);
    return json({ success: true });
  }

  if (intent === "update") {
    const termId = parseInt(formData.get("termId") as string, 10);
    const term = formData.get("term") as string;
    const description = formData.get("description") as string;
    const category = formData.get("category") as string;

    if (!term || !description) {
      return json({ error: "Term and description are required" }, { status: 400 });
    }

    await TermModel.update(termId, { term, description, category });
    return json({ success: true });
  }

  return json({ error: "Invalid intent" }, { status: 400 });
};

export default function Terms() {
  const { user, terms } = useLoaderData<{ user: any; terms: Term[] }>();
  const actionData = useActionData<{ error?: string; success?: boolean }>();
  const navigation = useNavigation();
  const submit = useSubmit();
  const [editTermId, setEditTermId] = useState<number | null>(null);
  const [editFormData, setEditFormData] = useState<{ term: string; description: string; category: string } | null>(null);
  const [autoDescription, setAutoDescription] = useState<string>("");
  const [termInput, setTermInput] = useState<string>("");
  const [isGenerating, setIsGenerating] = useState<boolean>(false);
  const abortControllerRef = useRef<AbortController | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false); // State for delete modal
  const [termToDelete, setTermToDelete] = useState<number | null>(null); // State for term to delete

  // Fetch autogenerated description from /ollama route
  const generateDescription = async () => {
    if (!termInput.trim()) {
      setAutoDescription("Please enter a term first.");
      return;
    }

    setIsGenerating(true);
    setAutoDescription("Generating description...");
    abortControllerRef.current = new AbortController();
    const signal = abortControllerRef.current.signal;

    const formData = new URLSearchParams();
    formData.append("intent", "termDescription");
    formData.append("term", termInput);

    try {
      const response = await fetch("/ollama", {
        method: "POST",
        body: formData,
        headers: {
          Accept: "text/event-stream",
        },
        signal,
      });

      if (!response.ok) {
        throw new Error(`Ollama API error: ${response.statusText}`);
      }

      if (!response.body) {
        throw new Error("No response body");
      }

      const reader = response.body.getReader();
      const decoder = new TextDecoder();
      let generatedText = "";

      while (true) {
        const { done, value } = await reader.read();
        if (done) break;
        if (signal.aborted) {
          setAutoDescription("Generation stopped by user.");
          break;
        }
        const chunk = decoder.decode(value, { stream: true });
        generatedText += chunk;
        setAutoDescription(generatedText);
      }
    } catch (error: unknown) {
      if (!(error instanceof Error && error.name === "AbortError")) {
        console.error("Error generating description:", error);
        setAutoDescription("Error generating description. Please try again.");
      }
    } finally {
      if (!signal.aborted) setIsGenerating(false);
      abortControllerRef.current = null;
    }
  };

  const handleStopGeneration = () => {
    if (abortControllerRef.current) {
      abortControllerRef.current.abort();
      setIsGenerating(false);
    }
  };

  const handleEdit = (term: Term) => {
    setEditTermId(term.id);
    setEditFormData({
      term: term.term,
      description: term.description,
      category: term.category || "",
    });
  };

  const handleSaveEdit = (e: React.FormEvent) => {
    e.preventDefault();
    if (editTermId && editFormData) {
      const formData = new FormData();
      formData.append("intent", "update");
      formData.append("termId", editTermId.toString());
      formData.append("term", editFormData.term);
      formData.append("description", editFormData.description);
      formData.append("category", editFormData.category);

      const submitEvent = new Event("submit", { cancelable: true }) as any;
      submitEvent.submitter = { formData };
      const form = e.target as HTMLFormElement;
      form.dispatchEvent(submitEvent);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    if (editFormData) {
      setEditFormData({
        ...editFormData,
        [e.target.name]: e.target.value,
      });
    } else if (e.target.name === "term") {
      setTermInput(e.target.value);
    }
  };

  const handleDeleteClick = (termId: number) => {
    setTermToDelete(termId);
    setIsModalOpen(true);
  };

  const handleConfirmDelete = () => {
    if (termToDelete) {
      const formData = new FormData();
      formData.append("intent", "delete");
      formData.append("termId", termToDelete.toString());
      submit(formData, { method: "post" });
    }
    setIsModalOpen(false);
    setTermToDelete(null);
  };

  const handleCancelDelete = () => {
    setIsModalOpen(false);
    setTermToDelete(null);
  };

  return (
    <div className="flex flex-col min-h-screen bg-gradient-to-r from-black to-white">
      <Header user={user} />
      <main className="flex-1 flex flex-col items-center justify-center">
        <div className="max-w-3xl mx-auto text-center text-white p-4">
          <h1 className="text-4xl font-bold tracking-tighter mb-8">Manage Custom Terms</h1>

          {/* Form to create a new term */}
          <div className="mb-8">
            <h2 className="text-white text-2xl font-semibold mb-4">Add a New Term</h2>
            {actionData?.error && <p className="text-red-500 mb-2">{actionData.error}</p>}
            {actionData?.success && <p className="text-green-500 mb-2">Term {navigation.state === "submitting" ? "saving" : "saved"} successfully!</p>}
            <Form method="post" className="space-y-4">
              <input type="hidden" name="intent" value="create" />
              <div>
                <label className="block text-white mb-1">Term or Phrase</label>
                <input
                  type="text"
                  name="term"
                  value={termInput}
                  onChange={handleChange}
                  className="w-full p-2 rounded-md bg-gray-800 text-white border border-gray-600"
                  placeholder="e.g., Dragon of Eldoria"
                  required
                />
              </div>
              <div>
                <label className="block text-white mb-1">Description</label>
                <textarea
                  name="description"
                  value={autoDescription || ""}
                  onChange={(e) => setAutoDescription(e.target.value)}
                  className="w-[90%] mx-auto p-2 rounded-md bg-gray-800 text-white border border-gray-600 block"
                  placeholder="e.g., A fire-breathing dragon that guards the Eldorian Forest..."
                  rows={8}
                  style={{ resize: "none", overflow: "auto", height: "200px" }}
                  required
                />
              </div>
              <div>
                <label className="block text-white mb-1">Category (optional)</label>
                <select
                  name="category"
                  className="w-full p-2 rounded-md bg-gray-800 text-white border border-gray-600"
                  defaultValue=""
                  onChange={handleChange}
                >
                  <option value="">Select a category</option>
                  <option value="character">Character</option>
                  <option value="event">Event</option>
                  <option value="location">Location</option>
                  <option value="other">Other</option>
                </select>
              </div>
              <div className="flex justify-center gap-4">
                <button
                  type="submit"
                  className="btn btn-primary"
                  disabled={navigation.state === "submitting"}
                >
                  {navigation.state === "submitting" ? "Creating..." : "Create Term"}
                </button>
                <button
                  type="button"
                  onClick={generateDescription}
                  className="btn btn-secondary"
                  disabled={isGenerating || !termInput.trim()}
                >
                  {isGenerating ? "Generating..." : "Autogenerate Description"}
                </button>
                {isGenerating && (
                  <button
                    type="button"
                    onClick={handleStopGeneration}
                    className="btn btn-secondary"
                  >
                    Stop Generation
                  </button>
                )}
              </div>
            </Form>
          </div>

          {/* List of terms */}
          <div>
            <h2 className="text-white text-2xl font-semibold mb-4">Your Terms</h2>
            {terms.length === 0 ? (
              <p className="text-gray-400">No terms created yet.</p>
            ) : (
              <ul className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                {terms.map((term) => (
                  <li key={term.id} className="bg-gray-800 p-4 rounded-md">
                    <div className="flex justify-between items-start">
                      <div>
                        {editTermId === term.id ? (
                          <Form onSubmit={handleSaveEdit} className="space-y-4">
                            <input type="hidden" name="intent" value="update" />
                            <input type="hidden" name="termId" value={term.id.toString()} />
                            <div>
                              <label className="block text-white mb-1">Term or Phrase</label>
                              <input
                                type="text"
                                name="term"
                                value={editFormData?.term || ""}
                                onChange={handleChange}
                                className="w-full p-2 rounded-md bg-gray-800 text-white border border-gray-600"
                                required
                              />
                            </div>
                            <div>
                              <label className="block text-white mb-1">Description</label>
                              <textarea
                                name="description"
                                value={editFormData?.description || ""}
                                onChange={handleChange}
                                className="w-[90%] mx-auto p-2 rounded-md bg-gray-800 text-white border border-gray-600 block"
                                rows={8}
                                style={{ resize: "none", overflow: "auto", height: "200px" }}
                                required
                              />
                            </div>
                            <div>
                              <label className="block text-white mb-1">Category (optional)</label>
                              <select
                                name="category"
                                value={editFormData?.category || ""}
                                onChange={handleChange}
                                className="w-full p-2 rounded-md bg-gray-800 text-white border border-gray-600"
                              >
                                <option value="">Select a category</option>
                                <option value="character">Character</option>
                                <option value="event">Event</option>
                                <option value="location">Location</option>
                                <option value="other">Other</option>
                              </select>
                            </div>
                            <button type="submit" className="btn btn-primary">
                              {navigation.state === "submitting" ? "Saving..." : "Save"}
                            </button>
                            <button
                              type="button"
                              onClick={() => setEditTermId(null)}
                              className="btn btn-secondary ml-2"
                            >
                              Cancel
                            </button>
                          </Form>
                        ) : (
                          <>
                            <h3 className="text-white text-xl font-semibold">{term.term}</h3>
                            {term.category && <p className="text-gray-400 text-sm">Category: {term.category}</p>}
                            <p className="text-gray-300 mt-2">{term.description}</p>
                          </>
                        )}
                      </div>
                      <div className="flex flex-col space-y-2">
                        {editTermId !== term.id && (
                          <>
                            <button
                              onClick={() => handleEdit(term)}
                              className="btn btn-secondary"
                            >
                              Edit
                            </button>
                            <button
                              type="button"
                              onClick={() => handleDeleteClick(term.id)}
                              className="btn btn-secondary bg-red-500 hover:bg-red-600"
                            >
                              Delete
                            </button>
                          </>
                        )}
                      </div>
                    </div>
                  </li>
                ))}
              </ul>
            )}
          </div>
        </div>
      </main>

      {/* Custom Delete Confirmation Modal */}
      {isModalOpen && (
        <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
          <div className="bg-gray-800 p-6 rounded-lg shadow-lg max-w-sm w-full">
            <h2 className="text-xl font-bold text-white mb-4">Confirm Deletion</h2>
            <p className="text-gray-300 mb-6">Are you sure you want to delete this term? This action cannot be undone.</p>
            <div className="flex justify-end gap-4">
              <button
                onClick={handleCancelDelete}
                className="btn btn-secondary bg-gray-600 hover:bg-gray-700 text-white py-2 px-4 rounded"
              >
                Cancel
              </button>
              <button
                onClick={handleConfirmDelete}
                className="btn btn-secondary bg-red-500 hover:bg-red-600 text-white py-2 px-4 rounded"
              >
                Delete
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}